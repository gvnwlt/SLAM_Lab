<launch>
    <!-- Settings -->
    <arg name="slam" default="false" /> 
    <arg name="slam_methods" default="gmapping" doc="slam type [gmapping, cartographer, hector, karto, frontier_exploration]"/>
    <arg name="use_map" default="false" />
    <arg name="use_navigation" default="false" />


    <!-- Simulator -->
    <group>
        <!-- gazebo launch with empty world -->
        <include file ="$(find gazebo_ros)/launch/empty_world.launch">
                <arg name="world_name" value="$(find simulator)/world/office_tb3.world"/>   
                <!-- <arg name="world_name" value="$(find simulator)/world/empty_world.world"/>    -->
        </include> 

        <!-- uploading urdf robot model into parameter server -->
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_waffle_pi.urdf.xacro"/>  
        
        <!-- from parameter server spawn model into gazebo  -->
        <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-x 50 -urdf -model turtlebot3_waffle_pi -param robot_description">
            <!-- some model param -->
        </node>

        <!-- publisher transform for all joint and thier inbetween relations for rviz -->
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" unless="$(arg slam)">
            <param name ="publish_frequency" type=" double" value="50.0"/>
        </node>
    </group>

    <!-- Controller -->
    <group>
        <!-- Running the robot moving node -->
        <!-- <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard">
        </node> -->
        <include file="$(find teleop_twist_joy)/launch/teleop.launch"/>
    </group>

    <!-- SLAM -->
    <group>
        <!-- Slam Node running for creating map (also launches a robot_state_publisher) -->
        <include file="$(find turtlebot3_slam)/launch/turtlebot3_slam.launch" if="$(arg slam)">
            <!-- <env name="TURTLEBOT3_MODEL" value="waffle_pi"/> -->
            <arg name="slam_methods" value="$(arg slam_methods)"/> 
        </include>  
    </group> 

    <!-- Mapping -->
    <group if="$(arg use_map)">
        <!-- using the map we saved earlier -->
        <arg name="map_file" value="$(find simulator)/map/map.yaml"/>
        
        <!-- Map_server package is used to handle mapp we saved -->
        <node pkg="map_server" type="map_server" name="map_server" args="$(arg map_file)"/>

        <!-- Adaptive monto carlo node running -->
        <include file="$(find turtlebot3_navigation)/launch/amcl.launch"/>
    </group>

    <!-- Navigation -->
    <group if="$(arg use_navigation)">
        Setting up the MOVEBASE node and costmaps parameters
        <node pkg="move_base" type="move_base" name="move_base" respawn="false" output="screen" >
            <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>
            <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_waffle_pi.yaml" command="load" ns="global_costmap" />
            <rosparam file="$(find turtlebot3_navigation)/param/costmap_common_params_waffle_pi.yaml" command="load" ns="local_costmap" />
            <rosparam file="$(find turtlebot3_navigation)/param/local_costmap_params.yaml" command="load"/>
            <rosparam file="$(find turtlebot3_navigation)/param/global_costmap_params.yaml" command="load"/>
            <rosparam file="$(find turtlebot3_navigation)/param/move_base_params.yaml" command="load"/>
            <rosparam file="$(find turtlebot3_navigation)/param/dwa_local_planner_params_waffle_pi.yaml" command="load"/>
            <remap from="cmd_vel" to="/cmd_vel"/>
            <remap from="odom" to="odom"/>
            <param name="DWAPlannerROS/min_vel_x" value="0.0" if ="false"/>
        </node> 
    </group> 
</launch>